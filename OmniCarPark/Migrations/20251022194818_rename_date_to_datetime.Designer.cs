// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OmniCarPark.Infrastructure.Data;

#nullable disable

namespace OmniCarPark.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251022194818_rename_date_to_datetime")]
    partial class rename_date_to_datetime
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OmniCarPark.Infrastructure.Data.Models.ParkingEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ParkingEntryDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ParkingExitDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ParkingSpaceId")
                        .HasColumnType("integer");

                    b.Property<string>("RegistrationPlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ParkingSpaceId")
                        .HasFilter("\"ParkingExitDate\" IS NULL");

                    b.HasIndex("RegistrationPlate")
                        .HasFilter("\"ParkingExitDate\" IS NULL");

                    b.ToTable("ParkEntries");
                });

            modelBuilder.Entity("OmniCarPark.Infrastructure.Data.Models.ParkingSpace", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ParkingSpaces");
                });

            modelBuilder.Entity("OmniCarPark.Infrastructure.Data.Models.ParkingEntry", b =>
                {
                    b.HasOne("OmniCarPark.Infrastructure.Data.Models.ParkingSpace", "ParkingSpace")
                        .WithMany("ParkingEntries")
                        .HasForeignKey("ParkingSpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParkingSpace");
                });

            modelBuilder.Entity("OmniCarPark.Infrastructure.Data.Models.ParkingSpace", b =>
                {
                    b.Navigation("ParkingEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
